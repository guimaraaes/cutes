/** Generated by YAKINDU Statechart Tools code generator. */

#include "Statechart.h"

/*! \file Implementation of the state machine 'Statechart'
*/




Statechart::Statechart()  :
timerService(sc_null),
ifaceLight(sc_null),
ifacePir(sc_null),
isExecuting(false)
{
	this->ifaceLight.parent = this;
	this->ifacePir.parent = this;
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = Statechart_last_state;
	
	clearInEvents();
}

Statechart::~Statechart()
{
}

Statechart::Light::Light(Statechart* parent) :
ON_raised(false),
OFF_raised(false),
parent(parent)
{
}

Statechart::Pir::Pir(Statechart* parent) :
ON_raised(false),
OFF_raised(false),
parent(parent)
{
}


using namespace statechart_events;

SctEvent* Statechart::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

void Statechart::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return;
	}
	switch(event->name)
	{
		case Pir_ON:
		case Pir_OFF:
		{
			ifacePir.dispatch_event(event);
			break;
		}
		case Statechart_main_region_StateLightOn_time_event_0:
		{
			timeEvents[0] = true;
			break;
		}
		default:
			break;
	}
	delete event;
}

void Statechart::Light::dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		default:
			break;
	}
}
void Statechart::Pir::dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case Pir_ON:
		{
			internal_raiseON();
			break;
		}
		case Pir_OFF:
		{
			internal_raiseOFF();
			break;
		}
		default:
			break;
	}
}

StatechartEventName Statechart::getTimedEventName(sc_eventid evid)
{
	if (evid == (sc_eventid)(&timeEvents[0])) {
		return Statechart_main_region_StateLightOn_time_event_0;
	}
	return invalid_event;
}



sc_boolean Statechart::isActive() const
{
	return stateConfVector[0] != Statechart_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Statechart::isFinal() const
{
   return false;}

sc_boolean Statechart::check() {
	if(timerService == sc_null) {
		return false;
	}
	return true;
}


void Statechart::setTimerService(sc::timer::TimerServiceInterface* timerService)
{
	this->timerService = timerService;
}

sc::timer::TimerServiceInterface* Statechart::getTimerService()
{
	return timerService;
}

sc_integer Statechart::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void Statechart::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		inEventQueue.push_back(new TimedSctEvent(getTimedEventName(evid)));
		runCycle();
	}
}


sc_boolean Statechart::isStateActive(StatechartStates state) const
{
	switch (state)
	{
		case main_region_StateLightOff : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATELIGHTOFF] == main_region_StateLightOff
			);
		case main_region_StateLightOn : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATELIGHTON] == main_region_StateLightOn
			);
		case main_region_StateDelay : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEDELAY] == main_region_StateDelay
			);
		default: return false;
	}
}

Statechart::Light* Statechart::light()
{
	return &ifaceLight;
}
/* Functions for event ON in interface Light */
sc::rx::Observable<void>* Statechart::Light::getON()
{
	return &(this->ON_observable);
}
/* Functions for event OFF in interface Light */
sc::rx::Observable<void>* Statechart::Light::getOFF()
{
	return &(this->OFF_observable);
}
Statechart::Pir* Statechart::pir()
{
	return &ifacePir;
}
/* Functions for event ON in interface Pir */
void Statechart::Pir::raiseON()
{
	parent->inEventQueue.push_back(new SctEvent_Pir_ON(Pir_ON));
	parent->runCycle();
}
void Statechart::Pir::internal_raiseON()
{
	ON_raised = true;
}
/* Functions for event OFF in interface Pir */
void Statechart::Pir::raiseOFF()
{
	parent->inEventQueue.push_back(new SctEvent_Pir_OFF(Pir_OFF));
	parent->runCycle();
}
void Statechart::Pir::internal_raiseOFF()
{
	OFF_raised = true;
}

// implementations of all internal functions

/* Entry action for state 'StateLightOff'. */
void Statechart::enact_main_region_StateLightOff()
{
	/* Entry action for state 'StateLightOff'. */
	ifaceLight.OFF_observable.next();
	ifaceLight.OFF_raised = true;
}

/* Entry action for state 'StateLightOn'. */
void Statechart::enact_main_region_StateLightOn()
{
	/* Entry action for state 'StateLightOn'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), (5 * 1000), false);
	ifaceLight.ON_observable.next();
	ifaceLight.ON_raised = true;
}

/* Exit action for state 'StateLightOn'. */
void Statechart::exact_main_region_StateLightOn()
{
	/* Exit action for state 'StateLightOn'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* 'default' enter sequence for state StateLightOff */
void Statechart::enseq_main_region_StateLightOff_default()
{
	/* 'default' enter sequence for state StateLightOff */
	enact_main_region_StateLightOff();
	stateConfVector[0] = main_region_StateLightOff;
}

/* 'default' enter sequence for state StateLightOn */
void Statechart::enseq_main_region_StateLightOn_default()
{
	/* 'default' enter sequence for state StateLightOn */
	enact_main_region_StateLightOn();
	stateConfVector[0] = main_region_StateLightOn;
}

/* 'default' enter sequence for state StateDelay */
void Statechart::enseq_main_region_StateDelay_default()
{
	/* 'default' enter sequence for state StateDelay */
	stateConfVector[0] = main_region_StateDelay;
}

/* 'default' enter sequence for region main_region */
void Statechart::enseq_main_region_default()
{
	/* 'default' enter sequence for region main_region */
	react_main_region__entry_Default();
}

/* Default exit sequence for state StateLightOff */
void Statechart::exseq_main_region_StateLightOff()
{
	/* Default exit sequence for state StateLightOff */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state StateLightOn */
void Statechart::exseq_main_region_StateLightOn()
{
	/* Default exit sequence for state StateLightOn */
	stateConfVector[0] = Statechart_last_state;
	exact_main_region_StateLightOn();
}

/* Default exit sequence for state StateDelay */
void Statechart::exseq_main_region_StateDelay()
{
	/* Default exit sequence for state StateDelay */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for region main_region */
void Statechart::exseq_main_region()
{
	/* Default exit sequence for region main_region */
	/* Handle exit of all possible states (of Statechart.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_StateLightOff :
		{
			exseq_main_region_StateLightOff();
			break;
		}
		case main_region_StateLightOn :
		{
			exseq_main_region_StateLightOn();
			break;
		}
		case main_region_StateDelay :
		{
			exseq_main_region_StateDelay();
			break;
		}
		default: break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StateLightOff_default();
}

sc_integer Statechart::react(const sc_integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc_integer Statechart::main_region_StateLightOff_react(const sc_integer transitioned_before) {
	/* The reactions of state StateLightOff. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (ifacePir.ON_raised)
		{ 
			exseq_main_region_StateLightOff();
			enseq_main_region_StateLightOn_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (ifacePir.OFF_raised)
			{ 
				exseq_main_region_StateLightOff();
				enseq_main_region_StateLightOff_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateLightOn_react(const sc_integer transitioned_before) {
	/* The reactions of state StateLightOn. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[0])
		{ 
			exseq_main_region_StateLightOn();
			timeEvents[0] = false;
			enseq_main_region_StateDelay_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateDelay_react(const sc_integer transitioned_before) {
	/* The reactions of state StateDelay. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (ifacePir.OFF_raised)
		{ 
			exseq_main_region_StateDelay();
			enseq_main_region_StateLightOff_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (ifacePir.ON_raised)
			{ 
				exseq_main_region_StateDelay();
				enseq_main_region_StateLightOn_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

void Statechart::clearInEvents() {
	ifacePir.ON_raised = false;
	ifacePir.OFF_raised = false;
	timeEvents[0] = false;
}

void Statechart::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case main_region_StateLightOff :
		{
			main_region_StateLightOff_react(-1);
			break;
		}
		case main_region_StateLightOn :
		{
			main_region_StateLightOn_react(-1);
			break;
		}
		case main_region_StateDelay :
		{
			main_region_StateDelay_react(-1);
			break;
		}
		default: break;
	}
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
		dispatch_event(getNextEvent());
	} while (((ifacePir.ON_raised) || (ifacePir.OFF_raised)) || (timeEvents[0]));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default();
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_main_region();
	isExecuting = false;
}



