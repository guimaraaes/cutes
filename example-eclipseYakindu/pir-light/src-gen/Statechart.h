/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

/*!
 * Forward declaration for the Statechart state machine.
 */
 class Statechart;


#include <deque>
#include "../src/sc_types.h"
#include "../src/sc_rxcpp.h"
#include "../src/sc_statemachine.h"
#include "../src/sc_timer.h"

/*! \file Header of the state machine 'Statechart'.
*/


#ifndef SCT_EVENTS_STATECHART_H
#define SCT_EVENTS_STATECHART_H
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif

namespace statechart_events
{
typedef enum  {
	invalid_event = SC_INVALID_EVENT_VALUE,
	Pir_ON,
	Pir_OFF,
	Statechart_main_region_StateLightOn_time_event_0
} StatechartEventName;

class SctEvent
{
	public:
		SctEvent(StatechartEventName name) : name(name){}
		virtual ~SctEvent(){}
		const StatechartEventName name;
		
};
		
template <typename T>
class TypedSctEvent : public SctEvent
{
	public:
		TypedSctEvent(StatechartEventName name, T value) :
			SctEvent(name),
			value(value)
			{}
		virtual ~TypedSctEvent(){}
		const T value;
};

class SctEvent_Pir_ON : public SctEvent
{
	public:
		SctEvent_Pir_ON(StatechartEventName name) : SctEvent(name){};
};
class SctEvent_Pir_OFF : public SctEvent
{
	public:
		SctEvent_Pir_OFF(StatechartEventName name) : SctEvent(name){};
};
class TimedSctEvent : public SctEvent
{
	public:
		TimedSctEvent(StatechartEventName name) : SctEvent(name){};
};

}
#endif /* SCT_EVENTS_STATECHART_H */


/*! Define indices of states in the StateConfVector */
#define SCVI_MAIN_REGION_STATELIGHTOFF 0
#define SCVI_MAIN_REGION_STATELIGHTON 0
#define SCVI_MAIN_REGION_STATEDELAY 0


class Statechart : public sc::timer::TimedInterface, public sc::StatemachineInterface
{
	public:
		Statechart();
		
		virtual ~Statechart();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			Statechart_last_state,
			main_region_StateLightOff,
			main_region_StateLightOn,
			main_region_StateDelay
		} StatechartStates;
					
		static const sc_integer numStates = 3;
		
		//! Inner class for light interface scope.
		class Light
		{
			public:
				Light(Statechart* parent);
				
				/*! Gets the observable of the out event 'ON' that is defined in the interface scope 'light'. */
				sc::rx::Observable<void>* getON();
				
				
				/*! Gets the observable of the out event 'OFF' that is defined in the interface scope 'light'. */
				sc::rx::Observable<void>* getOFF();
				
				
				
				
			private:
				friend class Statechart;
				
				sc::rx::Observable<void> ON_observable;
				sc_boolean ON_raised;
				sc::rx::Observable<void> OFF_observable;
				sc_boolean OFF_raised;
				void dispatch_event(statechart_events::SctEvent * event);
				
				Statechart* parent;
				
				
				
				
				
		};
		
		/*! Returns an instance of the interface class 'Light'. */
		Light* light();
		
		//! Inner class for pir interface scope.
		class Pir
		{
			public:
				Pir(Statechart* parent);
				
				/*! Raises the in event 'ON' that is defined in the interface scope 'pir'. */
				void raiseON();
				
				
				/*! Raises the in event 'OFF' that is defined in the interface scope 'pir'. */
				void raiseOFF();
				
				
				
				
			private:
				friend class Statechart;
				
				/*! Raises the in event 'ON' that is defined in the interface scope 'pir'. */
				void internal_raiseON();
				sc_boolean ON_raised;
				/*! Raises the in event 'OFF' that is defined in the interface scope 'pir'. */
				void internal_raiseOFF();
				sc_boolean OFF_raised;
				void dispatch_event(statechart_events::SctEvent * event);
				
				Statechart* parent;
				
				
				
				
				
		};
		
		/*! Returns an instance of the interface class 'Pir'. */
		Pir* pir();
		
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void enter();
		
		virtual void exit();
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		sc_boolean check();
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		virtual void setTimerService(sc::timer::TimerServiceInterface* timerService);
		
		virtual sc::timer::TimerServiceInterface* getTimerService();
		
		virtual void raiseTimeEvent(sc_eventid event);
		
		virtual sc_integer getNumberOfParallelTimeEvents();
		
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(StatechartStates state) const;
		
		//! number of time events used by the state machine.
		static const sc_integer timeEventsCount = 1;
		
		//! number of time events that can be active at once.
		static const sc_integer parallelTimeEventsCount = 1;
		
		
	protected:
		
		
	private:
		Statechart(const Statechart &rhs);
		Statechart& operator=(const Statechart&);
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		sc::timer::TimerServiceInterface* timerService;
		sc_boolean timeEvents[timeEventsCount];
		
		
		StatechartStates stateConfVector[maxOrthogonalStates];
		
		
		Light ifaceLight;
		Pir ifacePir;
		
		
		sc_boolean isExecuting;
		
		
		// prototypes of all internal functions
		
		void enact_main_region_StateLightOff();
		void enact_main_region_StateLightOn();
		void exact_main_region_StateLightOn();
		void enseq_main_region_StateLightOff_default();
		void enseq_main_region_StateLightOn_default();
		void enseq_main_region_StateDelay_default();
		void enseq_main_region_default();
		void exseq_main_region_StateLightOff();
		void exseq_main_region_StateLightOn();
		void exseq_main_region_StateDelay();
		void exseq_main_region();
		void react_main_region__entry_Default();
		sc_integer react(const sc_integer transitioned_before);
		sc_integer main_region_StateLightOff_react(const sc_integer transitioned_before);
		sc_integer main_region_StateLightOn_react(const sc_integer transitioned_before);
		sc_integer main_region_StateDelay_react(const sc_integer transitioned_before);
		void clearInEvents();
		void microStep();
		void runCycle();
		
		
		statechart_events::SctEvent* getNextEvent();
		void dispatch_event(statechart_events::SctEvent * event);
		statechart_events::StatechartEventName getTimedEventName(sc_eventid evid);
		std::deque<statechart_events::SctEvent*> inEventQueue;
		
		
};




#endif /* STATECHART_H_ */
